# –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥, –º–µ–Ω—é –∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ 

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
from bot.db import get_free_devices, get_base_rent, create_rent, get_device_info, get_rent_history, get_rent_history_count, get_repair_history, get_repair_history_count, get_rent_last_date, get_repair_last_date, create_repair, finish_repair, get_pool, add_device_comment, get_last_device_comment, get_device_comments
from aiogram.exceptions import TelegramBadRequest
from bot.agenda import send_agenda, get_admins, send_reminder
from aiogram.utils.keyboard import ReplyKeyboardBuilder

router = Router()

# –¢–∞–±–ª–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–¥–µ–Ω—å: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
RENT_COEFFICIENTS = {
    1: 1.0, 2: 0.9, 3: 0.8, 4: 0.775, 5: 0.75, 6: 0.725, 7: 0.7, 8: 0.6913, 9: 0.6826, 10: 0.6729,
    11: 0.6652, 12: 0.6565, 13: 0.6487, 14: 0.6391, 15: 0.6304, 16: 0.6217, 17: 0.613, 18: 0.6043,
    19: 0.5957, 20: 0.587, 21: 0.5783, 22: 0.5696, 23: 0.5609, 24: 0.5522, 25: 0.5435, 26: 0.5348,
    27: 0.5261, 28: 0.5174, 29: 0.5087, 30: 0.5
}

DEVICE_STATUS = [
    ("all", "–í—Å–µ"),
    ("–°–≤–æ–±–æ–¥–µ–Ω", "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"),
    ("–í –∞—Ä–µ–Ω–¥–µ", "üî¥ –í –∞—Ä–µ–Ω–¥–µ"),
    ("–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ", "üõ†Ô∏è –ù–∞ —Ä–µ–º–æ–Ω—Ç–µ")
]

class RentStates(StatesGroup):
    choosing_device = State()
    entering_fio = State()
    entering_address = State()
    entering_date = State()
    entering_days = State()
    entering_sum = State()
    entering_discount = State()
    entering_phone = State()
    entering_telegram = State()
    confirming = State()

class RepairStates(StatesGroup):
    entering_comment = State()
    confirming = State()
    entering_finish_comment = State()
    confirming_finish = State()

class CommentStates(StatesGroup):
    entering_comment = State()

class FinishRentStates(StatesGroup):
    confirming = State()

class AddDeviceStates(StatesGroup):
    entering_serial = State()
    entering_type = State()
    entering_date = State()
    entering_price = State()
    entering_base_rent = State()
    confirming = State()

class DeleteDeviceStates(StatesGroup):
    choosing = State()
    confirming = State()

# –°—Ç–∞—Ä—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
@router.message(Command("rent"))
async def start_rent(message: Message, state: FSMContext):
    devices = await get_free_devices()
    if not devices:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ü–ö –¥–ª—è –∞—Ä–µ–Ω–¥—ã.")
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"üíª {d['serial_number']} ({d['type']})")] for d in devices] + [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ü–ö –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=kb)
    await state.set_state(RentStates.choosing_device)
    await state.update_data(devices=devices)

@router.message(RentStates.choosing_device)
async def choose_device(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    data = await state.get_data()
    devices = data.get("devices", [])
    selected = next((d for d in devices if message.text.startswith(f"üíª {d['serial_number']}")), None)
    if not selected:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ü–ö –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
        return
    await state.update_data(selected_device=selected)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_fio)

@router.message(RentStates.entering_fio)
async def enter_fio(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(client_fio=message.text)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_address)

@router.message(RentStates.entering_address)
async def enter_address(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(client_address=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_date)

@router.message(RentStates.entering_date)
async def enter_date(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if not message.text:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except (ValueError, TypeError):
        await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    await state.update_data(start_date=start_date)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞—Ä–µ–Ω–¥—ã:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_days)

@router.message(RentStates.entering_days)
async def enter_days(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if not message.text:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        return
    try:
        days = int(message.text)
        if days <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        return
    await state.update_data(days=days)
    data = await state.get_data()
    device = data.get("selected_device", {})
    serial_number = device.get("serial_number")
    prolong_start_date = data.get("prolong_start_date")
    if prolong_start_date:
        start_date = prolong_start_date
    else:
        start_date = data.get("start_date")
    if not start_date:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã.")
        await state.clear()
        return
    if days <= 30:
        base_rent = await get_base_rent(serial_number)
        if base_rent is None:
            await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ü–ö.")
            await state.clear()
            return
        coeff = RENT_COEFFICIENTS.get(days, 1.0)
        rent_sum = round(base_rent * days * coeff, 2)
        await state.update_data(rent_sum=rent_sum, coeff=coeff, start_date=start_date)
        end_date = start_date + timedelta(days=days-1)
        await message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ: —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} ({days} –¥–Ω–µ–π)")
        await confirm_rent(message, state)
    else:
        await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        await state.set_state(RentStates.entering_sum)

@router.message(RentStates.entering_sum)
async def enter_sum(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if not message.text:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    try:
        rent_sum = float(message.text.replace(",", "."))
        if rent_sum <= 0:
            raise ValueError
    except (ValueError, TypeError, AttributeError):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await state.update_data(rent_sum=rent_sum, coeff=None)
    data = await state.get_data()
    start_date = data.get("start_date")
    if not start_date:
        prolong_start_date = data.get("prolong_start_date")
        if prolong_start_date:
            await state.update_data(start_date=prolong_start_date)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã.")
            await state.clear()
            return
    await confirm_rent(message, state)

async def confirm_rent(message: Message, state: FSMContext):
    data = await state.get_data()
    device = data.get("selected_device", {})
    fio = data.get("client_fio")
    address = data.get("client_address")
    start_date = data.get("start_date")
    days = data.get("days")
    rent_sum = data.get("rent_sum")
    coeff = data.get("coeff")
    # –ù–æ–≤—ã–π —à–∞–≥: –∑–∞–ø—Ä–æ—Å —Å–∫–∏–¥–∫–∏
    await message.answer(
        f"üí∏ –°—É–º–º–∞ –∞—Ä–µ–Ω–¥—ã: {rent_sum}‚ÇΩ\n"
        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É? –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10) –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="0")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await state.set_state(RentStates.entering_discount)

@router.message(RentStates.entering_discount)
async def enter_discount(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if not message.text:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –æ—Ç 0 –¥–æ 100.")
        return
    try:
        discount = float(message.text.replace(",", "."))
        if discount < 0 or discount > 100:
            raise ValueError
    except (ValueError, TypeError, AttributeError):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –æ—Ç 0 –¥–æ 100.")
        return
    data = await state.get_data()
    rent_sum = data.get("rent_sum") or 0.0
    rent_sum_discounted = round(rent_sum * (1 - discount / 100), 2)
    await state.update_data(discount_percent=discount, rent_sum_discounted=rent_sum_discounted)
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if data.get("prolong_start_date"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ Telegram
        device = data.get("selected_device", {})
        fio = data.get("client_fio") or "‚Äî"
        address = data.get("client_address") or "‚Äî"
        start_date = data.get("prolong_start_date")
        days = data.get("days") or 1
        coeff = data.get("coeff") or 1.0
        discount = discount
        rent_sum_discounted = rent_sum_discounted
        phone = data.get("client_phone") or "‚Äî"
        telegram = data.get("client_telegram") or "‚Äî"
        if start_date is not None:
            start_date_str = start_date.strftime('%d.%m.%Y')
        else:
            start_date_str = "‚Äî"
        text = (
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n"
            f"–ü–ö: üíª {device.get('serial_number')} ({device.get('type')})\n"
            f"–ö–ª–∏–µ–Ω—Ç: üë§ {fio}\n"
            f"–ê–¥—Ä–µ—Å: üè† {address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {phone}\n"
            f"Telegram –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {telegram}\n"
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: üìÖ {start_date_str}\n"
            f"–î–Ω–µ–π: üî¢ {days}\n"
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff if coeff is not None else '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ'}\n"
            f"–°–∫–∏–¥–∫–∞: {discount}%\n"
            f"–°—É–º–º–∞: üí∏ {rent_sum_discounted}‚ÇΩ"
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
        await message.answer(text, reply_markup=kb)
        await state.set_state(RentStates.confirming)
        return
    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚Äî –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_phone)

@router.message(RentStates.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    phone = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7 –∏–ª–∏ 8, 11-12 —Ü–∏—Ñ—Ä
    import re
    if not re.fullmatch(r"(\+7|8)\d{10}", phone):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ 89991234567.")
        return
    await state.update_data(client_phone=phone)
    await message.answer("@ –í–≤–µ–¥–∏—Ç–µ Telegram-—Ç–µ–≥ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ -", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="-")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_telegram)

@router.message(RentStates.entering_telegram)
async def enter_telegram(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    telegram_tag = message.text.strip()
    if telegram_tag == "-":
        telegram_tag = ""
    elif not telegram_tag.startswith("@") or len(telegram_tag) < 2:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram-—Ç–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return
    await state.update_data(client_telegram=telegram_tag)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    device = data.get("selected_device", {})
    fio = data.get("client_fio") or "‚Äî"
    address = data.get("client_address") or "‚Äî"
    start_date = data.get("start_date")
    days = data.get("days") or 1
    coeff = data.get("coeff") or 1.0
    discount = data.get("discount_percent") or 0.0
    rent_sum_discounted = data.get("rent_sum_discounted") or 0.0
    phone = data.get("client_phone") or ""
    telegram = telegram_tag or "‚Äî"
    if start_date is not None:
        start_date_str = start_date.strftime('%d.%m.%Y')
    else:
        start_date_str = "‚Äî"
    text = (
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"
        f"–ü–ö: üíª {device.get('serial_number')} ({device.get('type')})\n"
        f"–ö–ª–∏–µ–Ω—Ç: üë§ {fio}\n"
        f"–ê–¥—Ä–µ—Å: üè† {address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: üìû {phone}\n"
        f"Telegram: {telegram}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: üìÖ {start_date_str}\n"
        f"–î–Ω–µ–π: üî¢ {days}\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff if coeff is not None else '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ'}\n"
        f"–°–∫–∏–¥–∫–∞: {discount}%\n"
        f"–°—É–º–º–∞: üí∏ {rent_sum_discounted}‚ÇΩ"
    )
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=kb)
    await state.set_state(RentStates.confirming)

@router.message(RentStates.confirming)
async def finish_rent(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        device = data.get("selected_device", {})
        rent_id = data.get("rent_id")
        if rent_id:
            pool = await get_pool()
            async with pool.acquire() as conn:
                await conn.execute("UPDATE rents SET status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' WHERE id = $1", rent_id)
        client_fio = data.get("client_fio") or "‚Äî"
        client_address = data.get("client_address") or "‚Äî"
        start_date = data.get("start_date")
        days = data.get("days") or 1
        rent_sum_discounted = data.get("rent_sum_discounted") or 0.0
        coeff = data.get("coeff") or 1.0
        discount_percent = data.get("discount_percent") or 0.0
        client_phone = data.get("client_phone") or ""
        client_telegram = data.get("client_telegram") or ""
        await create_rent(
            device_serial_number=device.get("serial_number"),
            client_fio=client_fio,
            client_address=client_address,
            start_date=start_date,
            days=days,
            rent_amount=rent_sum_discounted,
            coefficient=coeff,
            discount_percent=discount_percent,
            client_phone=client_phone,
            client_telegram=client_telegram
        )
        start_date_str = start_date.strftime('%d.%m.%Y') if start_date else "‚Äî"
        await message.answer(
            f"üéâ –ê—Ä–µ–Ω–¥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
            f"–ü–ö: üíª {device.get('serial_number')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: üë§ {client_fio}\n"
            f"–° {start_date_str} –Ω–∞ {days} –¥–Ω–µ–π.\n"
            f"–°—É–º–º–∞: üí∏ {rent_sum_discounted}‚ÇΩ",
            reply_markup=ReplyKeyboardRemove()
        )
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.message(Command("devices"))
async def show_devices(message: Message):
    await show_devices_list(message, status_filter="all")

async def show_devices_list(message_or_cb, status_filter="all"):
    pool = await get_pool()
    async with pool.acquire() as conn:
        if status_filter == "all":
            rows = await conn.fetch("SELECT serial_number, type, status FROM devices ORDER BY serial_number")
        else:
            rows = await conn.fetch("SELECT serial_number, type, status FROM devices WHERE status = $1 ORDER BY serial_number", status_filter)
    if not rows:
        await message_or_cb.answer("‚ùóÔ∏è –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{r['serial_number']} ({r['type']}) {status_emoji(r['status'])}", callback_data=f"device_{r['serial_number']}")] for r in rows
        ] + [
            [InlineKeyboardButton(text=label, callback_data=f"filter_{code}") for code, label in DEVICE_STATUS]
        ]
    )
    text = "üñ•Ô∏è –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É."
    try:
        if isinstance(message_or_cb, Message):
            await message_or_cb.answer(text, reply_markup=kb)
        else:
            await message_or_cb.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            if not isinstance(message_or_cb, Message):
                await message_or_cb.answer("–£–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä")
        else:
            raise

def status_emoji(status):
    if status == "–°–≤–æ–±–æ–¥–µ–Ω":
        return "üü¢"
    if status == "–í –∞—Ä–µ–Ω–¥–µ":
        return "üî¥"
    if status == "–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ":
        return "üõ†Ô∏è"
    return "‚ùî"

@router.callback_query(F.data.startswith("filter_"))
async def filter_devices(cb: CallbackQuery):
    code = cb.data.replace("filter_", "")
    await show_devices_list(cb, status_filter=code)
    await cb.answer()

HISTORY_PAGE_SIZE = 5

@router.callback_query(F.data.startswith("device_"))
async def show_device_card(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("device_", "")
    info = await get_device_info(serial)
    if not info:
        await cb.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    profit_str = f"üí∞ {int(info['profit'])}‚ÇΩ" if info['profit'] >= 0 else f"üîª {int(info['profit'])}‚ÇΩ"
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É –¥–ª—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∫–ª–∏–µ–Ω—Ç–∞
    pool = await get_pool()
    async with pool.acquire() as conn:
        rent = await conn.fetchrow("SELECT start_date, days, client_name, client_phone, client_telegram FROM rents WHERE device_serial_number = $1 AND status = '–∞–∫—Ç–∏–≤–Ω–∞' ORDER BY start_date DESC LIMIT 1", serial)
    end_date_str = "‚Äî"
    client_phone = client_telegram = "‚Äî"
    if rent and rent["start_date"] and rent["days"]:
        end_date = rent["start_date"] + timedelta(days=rent["days"]-1)
        end_date_str = end_date.strftime('%d.%m.%Y')
        client_phone = rent["client_phone"] or "‚Äî"
        client_telegram = rent["client_telegram"] or "‚Äî"
    last_comment = await get_last_device_comment(serial)
    text = (
        f"üíª {info['serial_number']} ({info['type']})\n"
        f"–°—Ç–∞—Ç—É—Å: {status_emoji(info['status'])} {info['status']}\n"
        f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {info['purchase_date'].strftime('%d.%m.%Y')}\n"
        f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {int(info['purchase_amount'])}‚ÇΩ\n"
        f"–ü—Ä–∏–±—ã–ª—å: {profit_str}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {last_comment or '-'}\n\n"
        f"–í –∞—Ä–µ–Ω–¥–µ: {info['total_rent_days']} –¥–Ω–µ–π\n"
        f"–í —Ä–µ–º–æ–Ω—Ç–µ: {info['total_repair_days']} –¥–Ω–µ–π\n"
        f"–í –ø—Ä–æ—Å—Ç–æ–µ: {info['total_idle_days']} –¥–Ω–µ–π\n"
        f"–ê—Ä–µ–Ω–¥–∞ –¥–æ: {end_date_str}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {client_phone}\n"
        f"Telegram –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {client_telegram}"
    )
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons = []
    if info['status'] == '–°–≤–æ–±–æ–¥–µ–Ω':
        buttons.append([InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"rent_{serial}")])
    if info['status'] == '–í –∞—Ä–µ–Ω–¥–µ':
        buttons.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"prolong_{serial}")])
        buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"finishrent_{serial}")])
    if info['status'] != '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ':
        buttons.append([InlineKeyboardButton(text="üõ†Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"repair_{serial}")])
    if info['status'] == '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ':
        buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"finishrepair_{serial}")])
    # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.append([InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{serial}_0")])
    buttons.append([InlineKeyboardButton(text="‚ûï –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{serial}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="filter_all")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("history_"))
async def show_device_history(cb: CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback_data: history_SERIAL_offset
    parts = cb.data.split("_")
    serial = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    offset = page * HISTORY_PAGE_SIZE
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    rent_count = await get_rent_history_count(serial)
    repair_count = await get_repair_history_count(serial)
    rent_last = await get_rent_last_date(serial)
    repair_last = await get_repair_last_date(serial)
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∞—Ä–µ–Ω–¥—ã —Å–≤–µ—Ä—Ö—É
    rents = await get_rent_history(serial, offset=offset, limit=HISTORY_PAGE_SIZE, desc=True)
    pool = await get_pool()
    async with pool.acquire() as conn:
        repairs = await conn.fetch(
            "SELECT repair_date, problem_comment, solution_comment FROM repairs WHERE device_serial_number = $1 ORDER BY repair_date DESC OFFSET $2 LIMIT $3",
            serial, offset, HISTORY_PAGE_SIZE
        )
        rent_contacts = await conn.fetch(
            "SELECT start_date, client_phone, client_telegram FROM rents WHERE device_serial_number = $1 ORDER BY start_date DESC OFFSET $2 LIMIT $3",
            serial, offset, HISTORY_PAGE_SIZE
        )
        rent_contacts_map = {(r["start_date"],): (r["client_phone"], r["client_telegram"]) for r in rent_contacts}
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìú –ò—Å—Ç–æ—Ä–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {serial}\n\n"
    text += f"–í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥: {rent_count}"
    if rent_last:
        text += f" | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞—Ä–µ–Ω–¥–∞: {rent_last.strftime('%d.%m.%Y')}"
    text += "\n"
    text += f"–í—Å–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–æ–≤: {repair_count}"
    if repair_last:
        text += f" | –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–º–æ–Ω—Ç: {repair_last.strftime('%d.%m.%Y')}"
    text += "\n\n"
    if rents:
        text += "–ê—Ä–µ–Ω–¥—ã:\n"
        for i, r in enumerate(rents, start=1+offset):
            end_date = r['start_date'] + timedelta(days=r['days']-1) if r['start_date'] and r['days'] else None
            end_date_str = end_date.strftime('%d.%m.%Y') if end_date else "‚Äî"
            phone, tg = rent_contacts_map.get((r['start_date'],), ("‚Äî", "‚Äî"))
            text += f"{i}. {r['start_date'].strftime('%d.%m.%Y')} ‚Äî {end_date_str} ({r['days']} –¥–Ω.), {r['client_name']}, {int(r['rent_amount'])}‚ÇΩ, {r['status']}\n   –¢–µ–ª–µ—Ñ–æ–Ω: {phone} | Telegram: {tg}\n"
    else:
        text += "–ê—Ä–µ–Ω–¥—ã: –Ω–µ—Ç\n"
    if repairs:
        text += "\n–†–µ–º–æ–Ω—Ç—ã:\n"
        for i, r in enumerate(repairs, start=1+offset):
            date_str = r['repair_date'].strftime('%d.%m.%Y') if r['repair_date'] else "‚Äî"
            problem = r['problem_comment'] or "‚Äî"
            solution = r['solution_comment']
            if solution:
                text += f"{i}. {date_str} ‚Äî {problem} ‚Äî {solution}\n"
            else:
                text += f"{i}. {date_str} ‚Äî {problem}\n"
    else:
        text += "\n–†–µ–º–æ–Ω—Ç—ã: –Ω–µ—Ç\n"
    comments = await get_device_comments(serial)
    if comments:
        text += "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
        for i, c in enumerate(comments, start=1):
            date_str = c["created_at"].strftime('%d.%m.%Y %H:%M') if c["created_at"] else "‚Äî"
            text += f"{i}. {date_str} ‚Äî {c['comment']}\n"
    else:
        text += "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –Ω–µ—Ç\n"
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ + –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_{serial}_{page-1}"))
    if rent_count > offset + HISTORY_PAGE_SIZE or repair_count > offset + HISTORY_PAGE_SIZE:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"history_{serial}_{page+1}"))
    nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É", callback_data=f"device_{serial}"))
    kb = InlineKeyboardMarkup(
        inline_keyboard=[nav_buttons]
    )
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("rent_"))
async def start_rent_from_card(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("rent_", "")
    # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –±–∞–∑—ã
    pool = await get_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT serial_number, type FROM devices WHERE serial_number = $1 AND status = '–°–≤–æ–±–æ–¥–µ–Ω'", serial)
        if not row:
            await cb.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        device = {"serial_number": row["serial_number"], "type": row["type"]}
    await state.update_data(devices=[device], selected_device=device)
    await cb.message.answer(f"üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –¥–ª—è {device['serial_number']} ({device['type']})")
    await cb.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_fio)
    await cb.answer()

@router.callback_query(F.data.startswith("prolong_"))
async def prolong_rent(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("prolong_", "")
    pool = await get_pool()
    async with pool.acquire() as conn:
        rent = await conn.fetchrow("SELECT id, client_name, client_address, start_date, days, rent_amount, coefficient, client_phone, client_telegram FROM rents WHERE device_serial_number = $1 AND status = '–∞–∫—Ç–∏–≤–Ω–∞' ORDER BY start_date DESC LIMIT 1", serial)
        if not rent:
            await cb.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        device = await conn.fetchrow("SELECT serial_number, type FROM devices WHERE serial_number = $1", serial)
        if not device:
            await cb.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
    start_date = rent["start_date"] + timedelta(days=rent["days"])
    await state.update_data(
        rent_id=rent["id"],
        selected_device={"serial_number": device["serial_number"], "type": device["type"]},
        client_fio=rent["client_name"],
        client_address=rent["client_address"],
        prolong_start_date=start_date,
        client_phone=rent["client_phone"] or "",
        client_telegram=rent["client_telegram"] or ""
    )
    await cb.message.answer(
        f"üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –¥–ª—è {serial} ({device['type']})\n"
        f"–ö–ª–∏–µ–Ω—Ç: {rent['client_name']}\n"
        f"–ê–¥—Ä–µ—Å: {rent['client_address']}\n"
        f"–¢–µ–∫—É—â–∞—è –∞—Ä–µ–Ω–¥–∞: {rent['start_date'].strftime('%d.%m.%Y')} –Ω–∞ {rent['days']} –¥–Ω–µ–π, —Å—É–º–º–∞ {int(rent['rent_amount'])}‚ÇΩ\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {start_date.strftime('%d.%m.%Y')} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
    )
    await cb.message.answer("üî¢ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É?", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(RentStates.entering_days)
    await cb.answer()

@router.callback_query(F.data.startswith("finishrent_"))
async def finish_rent_action(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("finishrent_", "")
    pool = await get_pool()
    async with pool.acquire() as conn:
        rent = await conn.fetchrow("SELECT id, client_name, client_address, start_date, days, rent_amount FROM rents WHERE device_serial_number = $1 AND status = '–∞–∫—Ç–∏–≤–Ω–∞' ORDER BY start_date DESC LIMIT 1", serial)
        if not rent:
            await cb.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        device = await conn.fetchrow("SELECT serial_number, type FROM devices WHERE serial_number = $1", serial)
        if not device:
            await cb.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
    await state.update_data(finish_rent_id=rent["id"], finish_rent_serial=serial, finish_rent_type=device["type"], finish_rent_client=rent["client_name"], finish_rent_address=rent["client_address"], finish_rent_start=rent["start_date"], finish_rent_days=rent["days"], finish_rent_amount=rent["rent_amount"])
    text = (
        f"‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã:\n"
        f"–ü–ö: üíª {serial} ({device['type']})\n"
        f"–ö–ª–∏–µ–Ω—Ç: üë§ {rent['client_name']}\n"
        f"–ê–¥—Ä–µ—Å: üè† {rent['client_address']}\n"
        f"–ü–µ—Ä–∏–æ–¥: {rent['start_date'].strftime('%d.%m.%Y')} –Ω–∞ {rent['days']} –¥–Ω–µ–π\n"
        f"–°—É–º–º–∞: üí∏ {int(rent['rent_amount'])}‚ÇΩ\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É?"
    )
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await cb.message.answer(text, reply_markup=kb)
    await state.set_state(FinishRentStates.confirming)
    await cb.answer()

@router.message(FinishRentStates.confirming)
async def finish_rent_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ":
        data = await state.get_data()
        rent_id = data.get("finish_rent_id")
        serial = data.get("finish_rent_serial")
        pool = await get_pool()
        async with pool.acquire() as conn:
            await conn.execute("UPDATE rents SET status = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' WHERE id = $1", rent_id)
            await conn.execute("UPDATE devices SET status = '–°–≤–æ–±–æ–¥–µ–Ω' WHERE serial_number = $1", serial)
        await message.answer("‚úÖ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.message(Command("agenda"))
async def manual_agenda(message: Message):
    if str(message.from_user.id) not in get_admins():
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await send_agenda(message.bot, [message.from_user.id])

@router.callback_query(F.data.startswith("repair_"))
async def start_repair(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("repair_", "")
    await state.update_data(repair_serial=serial)
    await cb.message.answer(
        "üõ†Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (—á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å):",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await state.set_state(RepairStates.entering_comment)
    await cb.answer()

@router.message(RepairStates.entering_comment)
async def repair_comment(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(repair_comment=message.text)
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:\n\n–ü—Ä–æ–±–ª–µ–º–∞: {message.text}"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer(text, reply_markup=kb)
    await state.set_state(RepairStates.confirming)

@router.message(RepairStates.confirming)
async def repair_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        serial = data.get("repair_serial")
        problem_comment = data.get("repair_comment")
        await create_repair(serial, problem_comment)
        await message.answer(f"üõ†Ô∏è –†–µ–º–æ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {serial}!", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.callback_query(F.data.startswith("finishrepair_"))
async def start_finish_repair(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("finishrepair_", "")
    await state.update_data(finish_repair_serial=serial)
    await cb.message.answer(
        "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await state.set_state(RepairStates.entering_finish_comment)
    await cb.answer()

@router.message(RepairStates.entering_finish_comment)
async def finish_repair_comment(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(finish_repair_comment=message.text)
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:\n\n–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ: {message.text}"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer(text, reply_markup=kb)
    await state.set_state(RepairStates.confirming_finish)

@router.message(RepairStates.confirming_finish)
async def finish_repair_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        serial = data.get("finish_repair_serial")
        solution_comment = data.get("finish_repair_comment")
        await finish_repair(serial, solution_comment)
        await message.answer(f"‚úÖ –†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {serial}!", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.callback_query(F.data.startswith("comment_"))
async def start_device_comment(cb: CallbackQuery, state: FSMContext):
    serial = cb.data.replace("comment_", "")
    await state.update_data(comment_serial=serial)
    await cb.message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    await state.set_state(CommentStates.entering_comment)
    await cb.answer()

@router.message(CommentStates.entering_comment)
async def save_device_comment(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    data = await state.get_data()
    serial = data.get("comment_serial")
    await add_device_comment(serial, message.text)
    await message.answer(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {serial}!", reply_markup=ReplyKeyboardRemove())
    await send_main_menu(message)
    await state.clear()
    # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    fake_cb = CallbackQuery(id="0", from_user=message.from_user, data=f"device_{serial}", message=message)
    await show_device_card(fake_cb, FSMContext)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_menu_admin = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"), KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],
        [KeyboardButton(text="üóìÔ∏è –ê–¥–∂–µ–Ω–¥–∞"), KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü–ö"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ü–ö")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)
main_menu_user = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"), KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],
        [KeyboardButton(text="üóìÔ∏è –ê–¥–∂–µ–Ω–¥–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message: Message):
    is_admin = str(message.from_user.id) in get_admins()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=main_menu_admin if is_admin else main_menu_user)

@router.message(Command("menu"))
@router.message(Command("start"))
async def show_main_menu(message: Message):
    is_admin = str(message.from_user.id) in get_admins()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_admin if is_admin else main_menu_user)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
async def menu_devices(message: Message):
    await show_devices_list(message, status_filter="all")

@router.message(lambda m: m.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É")
async def menu_rent(message: Message, state: FSMContext):
    await start_rent(message, state)

@router.message(lambda m: m.text == "üóìÔ∏è –ê–¥–∂–µ–Ω–¥–∞")
async def menu_agenda(message: Message):
    await manual_agenda(message)

@router.message(lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
    await message.answer("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞: ... (–¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)")

@router.message(Command("reminder"))
async def manual_reminder(message: Message):
    if str(message.from_user.id) not in get_admins():
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await send_reminder(message.bot, [message.from_user.id], days_ahead=3)

@router.message(Command("add_device"))
async def add_device_start(message: Message, state: FSMContext):
    if str(message.from_user.id) not in get_admins():
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –ü–ö:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(AddDeviceStates.entering_serial)

@router.message(AddDeviceStates.entering_serial)
async def add_device_serial(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(device_serial=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PREMIUM, X –∏ —Ç.–¥.):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(AddDeviceStates.entering_type)

@router.message(AddDeviceStates.entering_type)
async def add_device_type(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    await state.update_data(device_type=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(AddDeviceStates.entering_date)

@router.message(AddDeviceStates.entering_date)
async def add_device_date(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    try:
        purchase_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except Exception:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    await state.update_data(device_purchase_date=purchase_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(AddDeviceStates.entering_price)

@router.message(AddDeviceStates.entering_price)
async def add_device_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    try:
        price = float(message.text.strip().replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0).")
        return
    await state.update_data(device_purchase_price=price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –≤ –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    await state.set_state(AddDeviceStates.entering_base_rent)

@router.message(AddDeviceStates.entering_base_rent)
async def add_device_base_rent(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    try:
        base_rent = float(message.text.strip().replace(",", "."))
        if base_rent <= 0:
            raise ValueError
    except Exception:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ 0).")
        return
    await state.update_data(device_base_rent=base_rent)
    data = await state.get_data()
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {data.get('device_serial')}\n"
        f"–¢–∏–ø: {data.get('device_type')}\n"
        f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {data.get('device_purchase_date').strftime('%d.%m.%Y')}\n"
        f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {int(data.get('device_purchase_price'))}‚ÇΩ\n"
        f"–ë–∞–∑–æ–≤–∞—è –∞—Ä–µ–Ω–¥–∞ –≤ –¥–µ–Ω—å: {data.get('device_base_rent')}‚ÇΩ\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?"
    )
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer(text, reply_markup=kb)
    await state.set_state(AddDeviceStates.confirming)

@router.message(AddDeviceStates.confirming)
async def add_device_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        data = await state.get_data()
        pool = await get_pool()
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO devices (serial_number, type, purchase_date, purchase_amount, base_rent_per_day, status) VALUES ($1, $2, $3, $4, $5, '–°–≤–æ–±–æ–¥–µ–Ω')",
                data.get('device_serial'), data.get('device_type'), data.get('device_purchase_date'), data.get('device_purchase_price'), data.get('device_base_rent')
            )
        await message.answer("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.message(Command("delete_device"))
async def delete_device_start(message: Message, state: FSMContext):
    if str(message.from_user.id) not in get_admins():
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    pool = await get_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT serial_number, type FROM devices ORDER BY serial_number")
    if not rows:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{r['serial_number']} ({r['type']})")] for r in rows] + [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=kb)
    await state.set_state(DeleteDeviceStates.choosing)

@router.message(DeleteDeviceStates.choosing)
async def delete_device_choose(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    serial = message.text.split()[0] if " " in message.text else message.text.strip()
    pool = await get_pool()
    async with pool.acquire() as conn:
        device = await conn.fetchrow("SELECT serial_number, type, purchase_date, purchase_amount, base_rent_per_day, status FROM devices WHERE serial_number = $1", serial)
    if not device:
        await message.answer("‚ùóÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(delete_serial=serial)
    text = (
        f"‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {device['serial_number']}\n"
        f"–¢–∏–ø: {device['type']}\n"
        f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {device['purchase_date'].strftime('%d.%m.%Y')}\n"
        f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {int(device['purchase_amount'])}‚ÇΩ\n"
        f"–ë–∞–∑–æ–≤–∞—è –∞—Ä–µ–Ω–¥–∞ –≤ –¥–µ–Ω—å: {device['base_rent_per_day']}‚ÇΩ\n"
        f"–°—Ç–∞—Ç—É—Å: {device['status']}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?"
    )
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer(text, reply_markup=kb)
    await state.set_state(DeleteDeviceStates.confirming)

@router.message(DeleteDeviceStates.confirming)
async def delete_device_confirm(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
        data = await state.get_data()
        serial = data.get("delete_serial")
        pool = await get_pool()
        async with pool.acquire() as conn:
            await conn.execute("DELETE FROM devices WHERE serial_number = $1", serial)
        await message.answer("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        await send_main_menu(message)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")

@router.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü–ö")
async def menu_add_device(message: Message, state: FSMContext):
    await add_device_start(message, state)

@router.message(lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ü–ö")
async def menu_delete_device(message: Message, state: FSMContext):
    await delete_device_start(message, state)

@router.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞")
async def menu_reminder(message: Message):
    await manual_reminder(message) 