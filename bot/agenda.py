"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–¥–∂–µ–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
"""
import datetime
from bot.db import get_overdue_rents, get_device_stats, get_month_revenue, get_rents_ending_soon, get_nominal_revenue, get_real_revenue
import os
from dotenv import load_dotenv

load_dotenv("config/.env")
ADMINS_FILE = "config/admins.txt"
with open(ADMINS_FILE, "r") as f:
    ADMINS = set(line.strip() for line in f if line.strip())

def get_admins():
    return ADMINS

async def send_agenda(bot, admins):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stats = await get_device_stats()
    nominal = await get_nominal_revenue()
    real = await get_real_revenue()
    revenue = int(nominal)
    real_revenue = int(real)
    rents = await get_overdue_rents()
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í –∞—Ä–µ–Ω–¥–µ: {stats['in_rent']}  üü†\n"
        f"–í —Ä–µ–º–æ–Ω—Ç–µ: {stats['in_repair']}  üõ†Ô∏è\n"
        f"–°–≤–æ–±–æ–¥–Ω–æ: {stats['free']}  üü¢\n"
        f"üí∞ –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {revenue}‚ÇΩ\n"
        f"üíµ –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {real_revenue}‚ÇΩ\n\n"
        f"üóìÔ∏è –ê–¥–∂–µ–Ω–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
    )
    if not rents:
        text += "–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏—Å—Ç–µ–∫—à–µ–π –∏–ª–∏ –∏—Å—Ç–µ–∫–∞—é—â–µ–π –∞—Ä–µ–Ω–¥–æ–π."
        for admin_id in admins:
            await bot.send_message(admin_id, text)
        return
    text += "–ü–ö, –∞—Ä–µ–Ω–¥–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è:"
    for admin_id in admins:
        await bot.send_message(admin_id, text)
        for r in rents:
            end_date = r['start_date'] + datetime.timedelta(days=r['days']-1)
            phone = r.get('client_phone') or '‚Äî'
            telegram = r.get('client_telegram') or '‚Äî'
            msg = (
                f"üíª {r['device_serial_number']} ({r['type']})\n"
                f"–ö–ª–∏–µ–Ω—Ç: {r['client_name']}\n"
                f"–ê–¥—Ä–µ—Å: {r['client_address']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {phone}\n"
                f"Telegram –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {telegram}\n"
                f"–°—É–º–º–∞: {int(r['rent_amount'])}‚ÇΩ\n"
                f"–ê—Ä–µ–Ω–¥–∞ –¥–æ: {end_date.strftime('%d.%m.%Y')}"
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"finishrent_{r['device_serial_number']}")],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"prolong_{r['device_serial_number']}")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"device_{r['device_serial_number']}")]
            ])
            await bot.send_message(admin_id, msg, reply_markup=kb)

async def send_reminder(bot, admins, days_ahead: int = 3):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    stats = await get_device_stats()
    nominal = await get_nominal_revenue()
    real = await get_real_revenue()
    revenue = int(nominal)
    real_revenue = int(real)
    soon_rents = await get_rents_ending_soon(days_ahead)
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í –∞—Ä–µ–Ω–¥–µ: {stats['in_rent']}  üü†\n"
        f"–í —Ä–µ–º–æ–Ω—Ç–µ: {stats['in_repair']}  üõ†Ô∏è\n"
        f"–°–≤–æ–±–æ–¥–Ω–æ: {stats['free']}  üü¢\n"
        f"üí∞ –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {revenue}‚ÇΩ\n"
        f"üíµ –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {real_revenue}‚ÇΩ\n\n"
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í –±–ª–∏–∂–∞–π—à–∏–µ {days_ahead} –¥–Ω—è(–µ–π) –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä–µ–Ω–¥—ã:\n"
    )
    if not soon_rents:
        text += "–ù–µ—Ç –∞—Ä–µ–Ω–¥, –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏."
        for admin_id in admins:
            await bot.send_message(admin_id, text)
        return
    for admin_id in admins:
        await bot.send_message(admin_id, text)
        for i, r in enumerate(soon_rents, 1):
            end_date = r['start_date'] + datetime.timedelta(days=r['days']-1)
            phone = r.get('client_phone') or '‚Äî'
            telegram = r.get('client_telegram') or '‚Äî'
            msg = (
                f"{i}. üíª {r['device_serial_number']} ({r['type']})\n"
                f"–ö–ª–∏–µ–Ω—Ç: {r['client_name']}\n"
                f"–ê–¥—Ä–µ—Å: {r['client_address']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {phone}\n"
                f"Telegram –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {telegram}\n"
                f"–°—É–º–º–∞: {int(r['rent_amount'])}‚ÇΩ\n"
                f"–î–æ: {end_date.strftime('%d.%m.%Y')}\n"
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"finishrent_{r['device_serial_number']}")],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"prolong_{r['device_serial_number']}")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"device_{r['device_serial_number']}")]
            ])
            await bot.send_message(admin_id, msg, reply_markup=kb) 